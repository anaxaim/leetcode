package main

import (
	"fmt"
)

// Оператор << - "битовый сдвиг влево", в двоичной системе это эквивалентно умножению числа на 2.
// 1 << 2 ; 1 - это 0001 если сдвинуть влево на две позиции, получим 0100 - это 4 в десятичной системе.

// Оператор | — это "битовое ИЛИ".
// Применяется к двум числам и возвращает число, в котором установлены биты, которые установлены в одном или обоих из исходных чисел.
// изначально result = 3 - это 0011 в двоичной
// result |= 1 << 2 - 0100 это 4 в двоичной
// 0011 (это 3)
// 0100 (это 4)
// 0111 (это 7)
// получаем 3 != 1 << 2 будет 7

func singleNumber(nums []int) int {
	const offset = 1 << 30 // Добавляем большое смещение (для отрицательных чисел)

	// Применяем смещение к каждому числу в массиве
	for i := range nums {
		nums[i] += offset
	}

	var result int
	for i := 0; i < 32; i++ {
		bitCount := 0
		for _, num := range nums {
			// установлен ли бит на позиции i в числе num, если да, увеличиваем счетчик.
			if (num & (1 << i)) != 0 {
				bitCount++
			}
		}
		// количество установленных битов на позиции i нечетное?
		// если да, устанавливаем соответствующий бит в result.
		if bitCount%2 != 0 {
			result |= 1 << i
		}
	}

	return result - offset // Вычитаем смещение, чтобы получить исходное число
}

func main() {
	fmt.Println(singleNumber([]int{2, 2, 1}))       // 1
	fmt.Println(singleNumber([]int{4, 1, 2, 1, 2})) // 4
	fmt.Println(singleNumber([]int{1}))             // 1
}
